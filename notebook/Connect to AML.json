{
	"name": "Connect to AML",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "testDotNt",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9ab54d80-206d-4f3d-a92b-fccaafacc647"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/cc7a7151-8b95-49b7-aaf9-6802e1f1f6d2/resourceGroups/test-synapse1/providers/Microsoft.Synapse/workspaces/test-synapse1-fan/bigDataPools/testDotNt",
				"name": "testDotNt",
				"type": "Spark",
				"endpoint": "https://test-synapse1-fan.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testDotNt",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# # pip install azureml-sdk\r\n",
					"# from pyspark.sql import SparkSession\r\n",
					"# from azureml.core import Workspace, Experiment\r\n",
					"# from azureml.core.authentication import ServicePrincipalAuthentication\r\n",
					"# from datetime import datetime\r\n",
					" \r\n",
					"# # Set your Azure subscription ID, resource group, workspace name, and service principal details\r\n",
					"\r\n",
					"# subscription_id = \"f6b7aa7e-08ed-4347-ac30-c9efab8702b2\"\r\n",
					"# resource_group = \"josh-aiml-prod-rg\"\r\n",
					"# workspace_name = \"joshaimlprodws\"\r\n",
					"\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from azureml.core import Workspace, Experiment\r\n",
					"from azureml.core.authentication import ServicePrincipalAuthentication\r\n",
					"from datetime import datetime\r\n",
					" \r\n",
					"# Set your Azure subscription ID, resource group, workspace name, and service principal details\r\n",
					"subscription_id = \"cc7a7151-8b95-49b7-aaf9-6802e1f1f6d2\"\r\n",
					"resource_group = \"testmachinelearning\"\r\n",
					"workspace_name = \"testmachinelearning\"\r\n",
					"tenant_id = \"72f988bf-86f1-41af-91ab-2d7cd011db47\"\r\n",
					"client_id = \"231c1695-dd3b-4771-837c-8b887d9933fd\"\r\n",
					"client_secret = \"Ejx8Q~~16zLuHRn2nPryp-NWr3FwHX0L96VMfdeP\"\r\n",
					"\r\n",
					"# Initialize a Spark session\r\n",
					"spark = SparkSession.builder.appName(\"AMLExperimentList\").getOrCreate()\r\n",
					"\r\n",
					"# Authenticate using ServicePrincipalAuthentication\r\n",
					"auth = ServicePrincipalAuthentication(\r\n",
					"    tenant_id=tenant_id,\r\n",
					"    service_principal_id=client_id,\r\n",
					"    service_principal_password=client_secret\r\n",
					")\r\n",
					"\r\n",
					"# Load the Azure Machine Learning workspace\r\n",
					"ws = Workspace(subscription_id=subscription_id, resource_group=resource_group, workspace_name=workspace_name, auth=auth)\r\n",
					"\r\n",
					"# Retrieve the list of experiments\r\n",
					"experiments = Experiment.list(ws)\r\n",
					"\r\n",
					"print(ws)\r\n",
					"print(experiments)\r\n",
					"\r\n",
					"\"\"\"\r\n",
					"# Create a list of experiment names\r\n",
					"#experiment_names = [experiment.name for experiment in experiments]\r\n",
					"\r\n",
					"# Create a DataFrame from the list of experiment names\r\n",
					"#experiment_df = spark.createDataFrame([(name,) for name in experiment_names], [\"ExperimentName\"])\r\n",
					"\r\n",
					"# Show the list of experiments\r\n",
					"#experiment_df.show()\r\n",
					" \r\n",
					"# Specify the name of the experiment you want to list the latest job from\r\n",
					"target_experiment_name = \"prod_ranker_training_pipeline\"\r\n",
					"\r\n",
					"# Get the experiment by name\r\n",
					"target_experiment = None\r\n",
					"for experiment in experiments:\r\n",
					"    if experiment.name == target_experiment_name:\r\n",
					"        target_experiment = experiment\r\n",
					"        break\r\n",
					"\r\n",
					"if target_experiment:\r\n",
					"    # Retrieve runs for the experiment\r\n",
					"    runs = target_experiment.get_runs()\r\n",
					"\r\n",
					"    # Find the latest run based on start_time (as retrieved from run details)\r\n",
					"    latest_run = None\r\n",
					"    latest_start_time = datetime.min\r\n",
					"    for run in runs:\r\n",
					"        run_details = run.get_details()\r\n",
					"        run_start_time_str = run_details.get(\"startTimeUtc\", None)\r\n",
					"        if run_start_time_str:\r\n",
					"            run_start_time = datetime.strptime(run_start_time_str, \"%Y-%m-%dT%H:%M:%S.%fZ\")\r\n",
					"            if run_start_time > latest_start_time:\r\n",
					"                latest_run = run\r\n",
					"                latest_start_time = run_start_time\r\n",
					"\r\n",
					"    if latest_run:\r\n",
					"        # Print information about the latest run\r\n",
					"        print(\"Latest Run in Experiment:\", target_experiment.name)\r\n",
					"        print(\"Run ID:\", latest_run.id)\r\n",
					"        print(\"Start Time:\", latest_start_time)\r\n",
					"        print(\"Status:\", latest_run.get_status())\r\n",
					"\r\n",
					"    # Cancel the latest run\r\n",
					"    latest_run.cancel()\r\n",
					"    print(\"Latest run has been canceled.\")\r\n",
					"else:\r\n",
					"    print(\"No runs found in the specified experiment\")\"\r\n",
					"tenant_id = \"e6aea76e-b321-4f9a-a6d0-48132c733f84\"\r\n",
					"client_id = \"73a85c80-0e20-4894-81c9-0e6f3f41a3c5\"\r\n",
					"client_secret = \"wSD8Q~RpI906SK0tcGuE2ClCiWt67Cw0qofEObC5\"\r\n",
					"\r\n",
					"# Initialize a Spark session\r\n",
					"spark = SparkSession.builder.appName(\"AMLExperimentList\").getOrCreate()\r\n",
					"\r\n",
					"# Authenticate using ServicePrincipalAuthentication\r\n",
					"auth = ServicePrincipalAuthentication(\r\n",
					"    tenant_id=tenant_id,\r\n",
					"    service_principal_id=client_id,\r\n",
					"    service_principal_password=client_secret\r\n",
					")\r\n",
					"\r\n",
					"# Load the Azure Machine Learning workspace\r\n",
					"ws = Workspace(subscription_id=subscription_id, resource_group=resource_group, workspace_name=workspace_name, auth=auth)\r\n",
					"\r\n",
					"# Retrieve the list of experiments\r\n",
					"experiments = Experiment.list(ws)\r\n",
					"\r\n",
					"# Create a list of experiment names\r\n",
					"#experiment_names = [experiment.name for experiment in experiments]\r\n",
					"\r\n",
					"# Create a DataFrame from the list of experiment names\r\n",
					"#experiment_df = spark.createDataFrame([(name,) for name in experiment_names], [\"ExperimentName\"])\r\n",
					"\r\n",
					"# Show the list of experiments\r\n",
					"#experiment_df.show()\r\n",
					" \r\n",
					"# Specify the name of the experiment you want to list the latest job from\r\n",
					"target_experiment_name = \"prod_ranker_training_pipeline\"\r\n",
					"\r\n",
					"# Get the experiment by name\r\n",
					"target_experiment = None\r\n",
					"for experiment in experiments:\r\n",
					"    if experiment.name == target_experiment_name:\r\n",
					"        target_experiment = experiment\r\n",
					"        break\r\n",
					"\r\n",
					"if target_experiment:\r\n",
					"    # Retrieve runs for the experiment\r\n",
					"    runs = target_experiment.get_runs()\r\n",
					"\r\n",
					"    # Find the latest run based on start_time (as retrieved from run details)\r\n",
					"    latest_run = None\r\n",
					"    latest_start_time = datetime.min\r\n",
					"    for run in runs:\r\n",
					"        run_details = run.get_details()\r\n",
					"        run_start_time_str = run_details.get(\"startTimeUtc\", None)\r\n",
					"        if run_start_time_str:\r\n",
					"            run_start_time = datetime.strptime(run_start_time_str, \"%Y-%m-%dT%H:%M:%S.%fZ\")\r\n",
					"            if run_start_time > latest_start_time:\r\n",
					"                latest_run = run\r\n",
					"                latest_start_time = run_start_time\r\n",
					"\r\n",
					"    if latest_run:\r\n",
					"        # Print information about the latest run\r\n",
					"        print(\"Latest Run in Experiment:\", target_experiment.name)\r\n",
					"        print(\"Run ID:\", latest_run.id)\r\n",
					"        print(\"Start Time:\", latest_start_time)\r\n",
					"        print(\"Status:\", latest_run.get_status())\r\n",
					"\r\n",
					"    # Cancel the latest run\r\n",
					"    latest_run.cancel()\r\n",
					"    print(\"Latest run has been canceled.\")\r\n",
					"else:\r\n",
					"    print(\"No runs found in the specified experiment\")\"\"\""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils.mssparkutils import azureML\r\n",
					"\r\n",
					"# getWorkspace() takes the linked service name,\r\n",
					"# not the Azure Machine Learning workspace name.\r\n",
					"ws = azureML.getWorkspace(\"AzureMLService2\")\r\n",
					"\r\n",
					"print(ws.name)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			}
		]
	}
}