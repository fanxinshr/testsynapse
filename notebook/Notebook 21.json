{
	"name": "Notebook 21",
	"properties": {
		"folder": {
			"name": "test"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "testconf",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "301c8d81-338c-41c0-bbe4-c29768510439"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/cc7a7151-8b95-49b7-aaf9-6802e1f1f6d2/resourceGroups/test-synapse1/providers/Microsoft.Synapse/workspaces/test-synapse1-fan/bigDataPools/testconf",
				"name": "testconf",
				"type": "Spark",
				"endpoint": "https://test-synapse1-fan.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testconf",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%configure -f\r\n",
					"{\r\n",
					"    \"conf\":{\r\n",
					"        \"spark.kryoserializer.buffer.max\":\"1280\",\r\n",
					"        \"spark.driver.maxResultSize\":\"999g\",\r\n",
					"        \"spark.sql.execution.arrow.pyspark.enabled\":\"True\",\r\n",
					"        \"spark.sql.analyzer.failAmbiguousSelfJoin\":\"False\"\r\n",
					"    }\r\n",
					"}"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"import random\r\n",
					"\r\n",
					"def inside(p):\r\n",
					"    x, y = random.random(), random.random()\r\n",
					"    return x*x + y*y < 1\r\n",
					"\r\n",
					"count = sc.parallelize(range(0, 100000)) \\\r\n",
					"             .filter(inside).count()\r\n",
					"print(\"Pi is roughly %f\" % (4.0 * count / 100000))"
				],
				"execution_count": 6
			}
		]
	}
}