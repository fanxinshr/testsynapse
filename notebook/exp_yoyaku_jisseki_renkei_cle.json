{
	"name": "exp_yoyaku_jisseki_renkei_cle",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9e6ac068-16db-4ad3-aaa8-650b5ca52e20"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pyspark.sql.functions as F\r\n",
					"import datetime\r\n",
					"from azure.storage.blob import BlobServiceClient "
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run modules/data_cleansing_common"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Key Vault\r\n",
					"hash_parameter = get_secret_value(key_valut_link_service_name,key_container_name,param_solt1_name,param_iterations1_name,param_solt2_name,param_iterations2_name)\r\n",
					"hash_code = F.udf(lambda c: hash_value(c, hash_parameter), StringType())"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#ETL業務日付を取得処理\r\n",
					"def select_gyomu_dt():\r\n",
					"    try:\r\n",
					"        # ログ出力共通関数を実行し、処理開始ログを出力する。\r\n",
					"        log('I0001', 'select_gyomu_dt')\r\n",
					"\r\n",
					"        #テーブル読み込み共通関数を実行し、結果を変数「etl_gyomu_dt_data」に設定する。\r\n",
					"        etl_gyomu_dt_data = load_table(dl_link_service_name, 'ETL_GYOMU_DT')\r\n",
					"        \r\n",
					"        #カラム選択\r\n",
					"        etl_gyomu_data = etl_gyomu_dt_data.select(col('GYOMU_DT')).collect()[0]['GYOMU_DT']\r\n",
					"\r\n",
					"        #ログ出力共通関数を実行し、処理終了ログを出力する。\r\n",
					"        log('I0002', 'select_gyomu_dt')\r\n",
					"\r\n",
					"        #処理終了\r\n",
					"        return etl_gyomu_data\r\n",
					"    except Exception as e:\r\n",
					"        log('E0001', 'select_gyomu_dt', type(e), e)\r\n",
					"        raise e"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#対象ファイル取得処理\r\n",
					"def load_target_file(etl_dt):\r\n",
					"    try:\r\n",
					"        log('I0001', 'load_target_file')\r\n",
					"        #読み込み対象ファイルのスキーマを定義し、変数「schema_columns」に設定する。\r\n",
					"        # スキーマ項目\r\n",
					"        schema_columns = [\r\n",
					"            # 共通会員ID\r\n",
					"            \"KAIIN_ID\",\r\n",
					"            # 共通会員ID連番\r\n",
					"            \"KAIIN_ID_NO\",\r\n",
					"            # 操作日\r\n",
					"            \"SOSA_YMD\",\r\n",
					"            # 操作時刻\r\n",
					"            \"SOSA_TIME\",\r\n",
					"            # 操作内容\r\n",
					"            \"SOSA_NAIYO\",\r\n",
					"            # 未発券\r\n",
					"            \"MIHAKKEN\",\r\n",
					"            # 会員種別\r\n",
					"            \"KAIIN_SHUBETSU_CD\",\r\n",
					"            # 会員番号\r\n",
					"            \"KAIIN_NO\",\r\n",
					"            # 会員氏名\r\n",
					"            \"KAIIN_NAME\",\r\n",
					"            # お客様コード\r\n",
					"            \"KOKYAKU_CD\",\r\n",
					"            # 出張番号\r\n",
					"            \"SHUCCHO_NO\",\r\n",
					"            # 法人社員番号\r\n",
					"            \"HOJIN_SHAIN_NO\",\r\n",
					"            # 受付箇所\r\n",
					"            \"UKETSUKE_KASHO\",\r\n",
					"            # 端末識別ID\r\n",
					"            \"TANMATSU_SHIKIBETSU_ID\",\r\n",
					"            # 端末番号\r\n",
					"            \"TANMATSU_NO\",\r\n",
					"            # 統一端末番号\r\n",
					"            \"TOUITSU_TANMATSU_NO\",\r\n",
					"            # お預かり番号\r\n",
					"            \"AZUKARI_NO\",\r\n",
					"            # 乗車日\r\n",
					"            \"JOSHA_YMD\",\r\n",
					"            # 乗車駅\r\n",
					"            \"JOSHA_EKI_CD\",\r\n",
					"            # 降車駅\r\n",
					"            \"KOSHA_EKI_CD\",\r\n",
					"            # 設備\r\n",
					"            \"SETSUBI_CD\",\r\n",
					"            # 列車１\r\n",
					"            \"RESSHA_1_CD\",\r\n",
					"            # 列車番号１\r\n",
					"            \"RESSHA_1_NO\",\r\n",
					"            # 乗車駅１\r\n",
					"            \"JOSHA_EKI_1_CD\",\r\n",
					"            # 発時刻１\r\n",
					"            \"HATSU_1_TIME\",\r\n",
					"            # 降車駅１\r\n",
					"            \"KOSHA_EKI_1_CD\",\r\n",
					"            # 着時刻１\r\n",
					"            \"CHAKU_1_TIME\",\r\n",
					"            # 設備１\r\n",
					"            \"SETSUBI_1_CD\",\r\n",
					"            # 喫煙禁煙区分１\r\n",
					"            \"KITSUEN_KINEN_1_KBN\",\r\n",
					"            # 設備付帯コード１\r\n",
					"            \"SETSUBI_FUTAI_1_CD\",\r\n",
					"            # レールスターフラグ１\r\n",
					"            \"RERU_STAR_1_FLG\",\r\n",
					"            # 列車２\r\n",
					"            \"RESSHA_2_CD\",\r\n",
					"            # 列車番号２\r\n",
					"            \"RESSHA_2_NO\",\r\n",
					"            # 乗車駅２\r\n",
					"            \"JOSHA_EKI_2_CD\",\r\n",
					"            # 発時刻２\r\n",
					"            \"HATSU_2_TIME\",\r\n",
					"            # 降車駅２\r\n",
					"            \"KOSHA_EKI_2_CD\",\r\n",
					"            # 着時刻２\r\n",
					"            \"CHAKU_2_TIME\",\r\n",
					"            # 設備２\r\n",
					"            \"SETSUBI_2_CD\",\r\n",
					"            # 喫煙禁煙区分２\r\n",
					"            \"KITSUEN_KINEN_2_KBN\",\r\n",
					"            # 設備付帯コード２\r\n",
					"            \"SETSUBI_FUTAI_2_CD\",\r\n",
					"            # レールスターフラグ２\r\n",
					"            \"RERU_STAR_2_FLG\",\r\n",
					"            # 列車３\r\n",
					"            \"RESSHA_3_CD\",\r\n",
					"            # 列車番号３\r\n",
					"            \"RESSHA_3_NO\",\r\n",
					"            # 乗車駅３\r\n",
					"            \"JOSHA_EKI_3_CD\",\r\n",
					"            # 発時刻３\r\n",
					"            \"HATSU_3_TIME\",\r\n",
					"            # 降車駅３\r\n",
					"            \"KOSHA_EKI_3_CD\",\r\n",
					"            # 着時刻３\r\n",
					"            \"CHAKU_3_TIME\",\r\n",
					"            # 設備３\r\n",
					"            \"SETSUBI_3_CD\",\r\n",
					"            # 喫煙禁煙区分３\r\n",
					"            \"KITSUEN_KINEN_3_KBN\",\r\n",
					"            # 設備付帯コード３\r\n",
					"            \"SETSUBI_FUTAI_3_CD\",\r\n",
					"            # レールスターフラグ３\r\n",
					"            \"RERU_STAR_3_FLG\",\r\n",
					"            # きっぷの種類\r\n",
					"            \"KIPPU_SHURUI_CD\",\r\n",
					"            # 回数券名称（回数券お預かり番号）\r\n",
					"            \"KAISUKEN_NAME_CD\",\r\n",
					"            # 大人\r\n",
					"            \"OTONA_NIN\",\r\n",
					"            # 小児\r\n",
					"            \"SHONI_NIN\",\r\n",
					"            # 請求ベース\r\n",
					"            \"SEIKYU_BASE_MNY\",\r\n",
					"            # 発生ベース\r\n",
					"            \"HASSEI_BASE_MNY\",\r\n",
					"            # 請求（受取）\r\n",
					"            \"SEIKYU_UKETORI_MNY\",\r\n",
					"            # 発生（受取）\r\n",
					"            \"HASSEI_UKETORI_MNY\",\r\n",
					"            # 還元額\r\n",
					"            \"KANGENGAKU_MNY\",\r\n",
					"            # 還元内容\r\n",
					"            \"KANGEN_NAIYO\",\r\n",
					"            # ＡＧＴ会員ＩＤ\r\n",
					"            \"AGENT_KAIIN_ID\",\r\n",
					"            # 基本会員ＩＤ\r\n",
					"            \"KIHON_KAIIN_ID\",\r\n",
					"            # 親会員ＩＤ\r\n",
					"            \"OYA_KAIIN_ID\",\r\n",
					"            # 会員ＩＤ\r\n",
					"            \"KAIIN_2_ID\",\r\n",
					"            # ＡＧＴ会員番号\r\n",
					"            \"AGENT_KAIIN_NO\",\r\n",
					"            # 基本会員番号\r\n",
					"            \"KIHON_KAIIN_NO\",\r\n",
					"            # 親会員番号\r\n",
					"            \"OYA_KAIIN_NO\",\r\n",
					"            # 会員番号\r\n",
					"            \"KAIIN_2_NO\",\r\n",
					"        ]\r\n",
					"\r\n",
					"        #BLOBファイル読み込み共通関数を実行し、結果を変数「file_data」に設定する。\r\n",
					"        etl_dt_str = datetime.datetime.strftime(etl_dt,'%Y%m%d')\r\n",
					"        file_path = dwh_blob_folder_path\r\n",
					"        \r\n",
					"        file_list = load_dwh_blob_file_list(dwh_blob_link_service_name,dwh_blob_container_name,file_path)\r\n",
					"\r\n",
					"        schema_str = \",\".join(f\"{item} string\" for item in schema_columns)\r\n",
					"        target_df = spark.createDataFrame(spark.sparkContext.emptyRDD(),schema_str)\r\n",
					"\r\n",
					"        # 取込対象ファイル件数カウント用\r\n",
					"        file_cnt = 0\r\n",
					"\r\n",
					"        for file_name in file_list:\r\n",
					"            if str(file_name).__contains__('EXP_YOYAKU_JISSEKI_' + etl_dt_str):\r\n",
					"                file_data = load_file(dwh_blob_link_service_name, dwh_blob_container_name, file_path + file_name, schema_columns,'CP932',has_header = None)\r\n",
					"                target_df = target_df.unionByName(file_data)\r\n",
					"\r\n",
					"                # 取込対象ファイル数のカウント\r\n",
					"                file_cnt += 1\r\n",
					"\r\n",
					"                if file_data.count() == 0:\r\n",
					"                    log('W0001','load_target_file','No Data In File')\r\n",
					"        \r\n",
					"        # 取込対象ファイルが０件の場合は、取込対象ファイル無しとして異常終了させる\r\n",
					"        if file_cnt == 0:\r\n",
					"            raise FileNotFoundError(\"File Not Found\")\r\n",
					"\r\n",
					"        target_df = target_df \\\r\n",
					"        .withColumn(\"T_CRM_SHORI_YMD\", F.lit(etl_dt_str)) \\\r\n",
					"        .withColumn(\"T_CRM_UPDATE_DT\", F.current_timestamp()) \\\r\n",
					"        .withColumn(\"T_CRM_UPDATE_ID\", F.lit('CRM_ETL_01_02_01'))\r\n",
					"\r\n",
					"        #ログ出力共通関数を実行し、処理終了ログを出力する。\r\n",
					"        log('I0002', 'load_target_file')\r\n",
					"        return target_df\r\n",
					"    except Exception as e:\r\n",
					"        log('E0001', 'load_target_file', type(e), e)\r\n",
					"        raise e"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#対象データ整形処理\r\n",
					"def cleansing_data(target_df):\r\n",
					"    try:\r\n",
					"        log('I0001', 'cleansing_data')\r\n",
					"        \r\n",
					"        target_df = target_df.select(    \r\n",
					"            # 共通会員ID\r\n",
					"            hash_code(\"KAIIN_ID\").alias(\"KAIIN_ID\"),\r\n",
					"            # 共通会員ID連番\r\n",
					"            \"KAIIN_ID_NO\",\r\n",
					"            # 操作日\r\n",
					"            \"SOSA_YMD\",\r\n",
					"            # 操作時刻\r\n",
					"            \"SOSA_TIME\",\r\n",
					"            # 操作内容\r\n",
					"            \"SOSA_NAIYO\",\r\n",
					"            # 未発券\r\n",
					"            \"MIHAKKEN\",\r\n",
					"            # 会員種別\r\n",
					"            \"KAIIN_SHUBETSU_CD\",\r\n",
					"            # 会員番号\r\n",
					"            \"KAIIN_NO\",\r\n",
					"            # 会員氏名\r\n",
					"            \"KAIIN_NAME\",\r\n",
					"            # お客様コード\r\n",
					"            \"KOKYAKU_CD\",\r\n",
					"            # 出張番号\r\n",
					"            \"SHUCCHO_NO\",\r\n",
					"            # 法人社員番号\r\n",
					"            \"HOJIN_SHAIN_NO\",\r\n",
					"            # 受付箇所\r\n",
					"            \"UKETSUKE_KASHO\",\r\n",
					"            # 端末識別ID\r\n",
					"            \"TANMATSU_SHIKIBETSU_ID\",\r\n",
					"            # 端末番号\r\n",
					"            \"TANMATSU_NO\",\r\n",
					"            # 統一端末番号\r\n",
					"            \"TOUITSU_TANMATSU_NO\",\r\n",
					"            # お預かり番号\r\n",
					"            \"AZUKARI_NO\",\r\n",
					"            # 乗車日\r\n",
					"            \"JOSHA_YMD\",\r\n",
					"            # 乗車駅\r\n",
					"            \"JOSHA_EKI_CD\",\r\n",
					"            # 降車駅\r\n",
					"            \"KOSHA_EKI_CD\",\r\n",
					"            # 設備\r\n",
					"            \"SETSUBI_CD\",\r\n",
					"            # 列車１\r\n",
					"            \"RESSHA_1_CD\",\r\n",
					"            # 列車番号１\r\n",
					"            \"RESSHA_1_NO\",\r\n",
					"            # 乗車駅１\r\n",
					"            \"JOSHA_EKI_1_CD\",\r\n",
					"            # 発時刻１\r\n",
					"            \"HATSU_1_TIME\",\r\n",
					"            # 降車駅１\r\n",
					"            \"KOSHA_EKI_1_CD\",\r\n",
					"            # 着時刻１\r\n",
					"            \"CHAKU_1_TIME\",\r\n",
					"            # 設備１\r\n",
					"            \"SETSUBI_1_CD\",\r\n",
					"            # 喫煙禁煙区分１\r\n",
					"            \"KITSUEN_KINEN_1_KBN\",\r\n",
					"            # 設備付帯コード１\r\n",
					"            \"SETSUBI_FUTAI_1_CD\",\r\n",
					"            # レールスターフラグ１\r\n",
					"            \"RERU_STAR_1_FLG\",\r\n",
					"            # 列車２\r\n",
					"            \"RESSHA_2_CD\",\r\n",
					"            # 列車番号２\r\n",
					"            \"RESSHA_2_NO\",\r\n",
					"            # 乗車駅２\r\n",
					"            \"JOSHA_EKI_2_CD\",\r\n",
					"            # 発時刻２\r\n",
					"            \"HATSU_2_TIME\",\r\n",
					"            # 降車駅２\r\n",
					"            \"KOSHA_EKI_2_CD\",\r\n",
					"            # 着時刻２\r\n",
					"            \"CHAKU_2_TIME\",\r\n",
					"            # 設備２\r\n",
					"            \"SETSUBI_2_CD\",\r\n",
					"            # 喫煙禁煙区分２\r\n",
					"            \"KITSUEN_KINEN_2_KBN\",\r\n",
					"            # 設備付帯コード２\r\n",
					"            \"SETSUBI_FUTAI_2_CD\",\r\n",
					"            # レールスターフラグ２\r\n",
					"            \"RERU_STAR_2_FLG\",\r\n",
					"            # 列車３\r\n",
					"            \"RESSHA_3_CD\",\r\n",
					"            # 列車番号３\r\n",
					"            \"RESSHA_3_NO\",\r\n",
					"            # 乗車駅３\r\n",
					"            \"JOSHA_EKI_3_CD\",\r\n",
					"            # 発時刻３\r\n",
					"            \"HATSU_3_TIME\",\r\n",
					"            # 降車駅３\r\n",
					"            \"KOSHA_EKI_3_CD\",\r\n",
					"            # 着時刻３\r\n",
					"            \"CHAKU_3_TIME\",\r\n",
					"            # 設備３\r\n",
					"            \"SETSUBI_3_CD\",\r\n",
					"            # 喫煙禁煙区分３\r\n",
					"            \"KITSUEN_KINEN_3_KBN\",\r\n",
					"            # 設備付帯コード３\r\n",
					"            \"SETSUBI_FUTAI_3_CD\",\r\n",
					"            # レールスターフラグ３\r\n",
					"            \"RERU_STAR_3_FLG\",\r\n",
					"            # きっぷの種類\r\n",
					"            \"KIPPU_SHURUI_CD\",\r\n",
					"            # 回数券名称（回数券お預かり番号）\r\n",
					"            \"KAISUKEN_NAME_CD\",\r\n",
					"            # 大人\r\n",
					"            F.col(\"OTONA_NIN\").cast(DecimalType(2,0)).alias(\"OTONA_NIN\"),\r\n",
					"            # 小児\r\n",
					"            F.col(\"SHONI_NIN\").cast(DecimalType(2,0)).alias(\"SHONI_NIN\"),\r\n",
					"            # 請求ベース\r\n",
					"            F.col(\"SEIKYU_BASE_MNY\").cast(DecimalType(9,0)).alias(\"SEIKYU_BASE_MNY\"),\r\n",
					"            # 発生ベース\r\n",
					"            F.col(\"HASSEI_BASE_MNY\").cast(DecimalType(9,0)).alias(\"HASSEI_BASE_MNY\"),\r\n",
					"            # 請求（受取）\r\n",
					"            F.col(\"SEIKYU_UKETORI_MNY\").cast(DecimalType(9,0)).alias(\"SEIKYU_UKETORI_MNY\"),\r\n",
					"            # 発生（受取）\r\n",
					"            F.col(\"HASSEI_UKETORI_MNY\").cast(DecimalType(9,0)).alias(\"HASSEI_UKETORI_MNY\"),\r\n",
					"            # 還元額\r\n",
					"            F.col(\"KANGENGAKU_MNY\").cast(DecimalType(9,0)).alias(\"KANGENGAKU_MNY\"),\r\n",
					"            # 還元内容\r\n",
					"            \"KANGEN_NAIYO\",\r\n",
					"            # ＡＧＴ会員ＩＤ\r\n",
					"            \"AGENT_KAIIN_ID\",\r\n",
					"            # 基本会員ＩＤ\r\n",
					"            \"KIHON_KAIIN_ID\",\r\n",
					"            # 親会員ＩＤ\r\n",
					"            mask_camp_name(\"OYA_KAIIN_ID\").alias(\"OYA_KAIIN_ID\"),\r\n",
					"            # 会員ＩＤ\r\n",
					"            mask_camp_name(\"KAIIN_2_ID\").alias(\"KAIIN_2_ID\"),\r\n",
					"            # ＡＧＴ会員番号\r\n",
					"            \"AGENT_KAIIN_NO\",\r\n",
					"            # 基本会員番号\r\n",
					"            \"KIHON_KAIIN_NO\",\r\n",
					"            # 親会員番号\r\n",
					"            \"OYA_KAIIN_NO\",\r\n",
					"            # 会員番号\r\n",
					"            \"KAIIN_2_NO\",\r\n",
					"            # 統合CRM日次処理日\r\n",
					"            \"T_CRM_SHORI_YMD\",\r\n",
					"            # 統合CRM更新日時\r\n",
					"            F.to_timestamp(\"T_CRM_UPDATE_DT\", \"yyyy/MM/dd HH:mm:ss\").alias(\"T_CRM_UPDATE_DT\"),\r\n",
					"            # 統合CRM更新ID\r\n",
					"            \"T_CRM_UPDATE_ID\"\r\n",
					"        ).withColumn(\"SOSA_TIME\", F.lpad(\"SOSA_TIME\", 5, \"0\")) \\\r\n",
					"            .withColumn(\"HATSU_1_TIME\", F.lpad(\"HATSU_1_TIME\", 5, \"0\")) \\\r\n",
					"            .withColumn(\"CHAKU_1_TIME\", F.lpad(\"CHAKU_1_TIME\", 5, \"0\")) \\\r\n",
					"            .withColumn(\"HATSU_2_TIME\", F.lpad(\"HATSU_2_TIME\", 5, \"0\")) \\\r\n",
					"            .withColumn(\"CHAKU_2_TIME\", F.lpad(\"CHAKU_2_TIME\", 5, \"0\")) \\\r\n",
					"            .withColumn(\"HATSU_3_TIME\", F.lpad(\"HATSU_3_TIME\", 5, \"0\")) \\\r\n",
					"            .withColumn(\"CHAKU_3_TIME\", F.lpad(\"CHAKU_3_TIME\", 5, \"0\"))\r\n",
					"\r\n",
					"        #ログ出力共通関数を実行し、処理終了ログを出力する。\r\n",
					"        log('I0002', 'cleansing_data')\r\n",
					"        return target_df\r\n",
					"    except Exception as e:\r\n",
					"        log('E0001', 'cleansing_data', type(e), e)\r\n",
					"        raise e"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# メイン処理\r\n",
					"if __name__ == '__main__':\r\n",
					"    try:\r\n",
					"        #ログ出力共通関数を実行し、処理開始ログを出力する。\r\n",
					"        log('I0001', 'main')\r\n",
					"        \r\n",
					"        #ETL業務日付を取得処理実行\r\n",
					"        etl_dt = select_gyomu_dt()\r\n",
					"\r\n",
					"        #対象ファイル取得処理実行\r\n",
					"        target_df = load_target_file(etl_dt)\r\n",
					"\r\n",
					"        #対象データ整形処理実行\r\n",
					"        target_df = cleansing_data(target_df)\r\n",
					"        \r\n",
					"        #DB更新\r\n",
					"        #PKリスト\r\n",
					"        pk_list = ['KAIIN_ID','SOSA_YMD','SOSA_TIME','SOSA_NAIYO','AZUKARI_NO']\r\n",
					"        #重複排除項目名\r\n",
					"        duplicated_exclude_columns = [{\"col\": \"T_CRM_UPDATE_DT\", \"sort\": \"desc\"}]\r\n",
					"        \r\n",
					"        #差分更新\r\n",
					"        save_table_upsert(dl_link_service_name,'EXP_YOYAKU_JISSEKI',target_df,pk_list,duplicated_exclude_columns)\r\n",
					"        \r\n",
					"        #元ファイル削除\r\n",
					"        etl_dt_str = datetime.datetime.strftime(etl_dt,'%Y%m%d')\r\n",
					"        file_path = dwh_blob_folder_path\r\n",
					"        file_list = load_dwh_blob_file_list(dwh_blob_link_service_name,dwh_blob_container_name,file_path)\r\n",
					"        for file_name in file_list:\r\n",
					"            if str(file_name).__contains__('EXP_YOYAKU_JISSEKI_' + etl_dt_str):\r\n",
					"                delete_dwh_blob(dwh_blob_link_service_name,dwh_blob_container_name,file_path + file_name)\r\n",
					"        #処理終了        \r\n",
					"        log('I0002', 'メイン処理')\r\n",
					"    except Exception as e:\r\n",
					"        #エラー処理\r\n",
					"        log('E0001', 'main', type(e), e)\r\n",
					"        raise e"
				]
			}
		]
	}
}